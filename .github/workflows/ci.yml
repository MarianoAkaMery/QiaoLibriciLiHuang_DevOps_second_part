name: DevOps Pipeline Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test-containerize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            cmake g++ make \
            uuid-dev libseccomp-dev pkg-config squashfs-tools cryptsetup \
            dos2unix curl wget openssh-client

      - name: Install Singularity
        run: |
          sudo apt-get update
          sudo apt-get install -y singularity-container


      - name: Run build script
        run: ./build.sh

      - name: Run unit tests
        run: ./build/test_grayscale

      - name: Build Singularity image
        run: sudo singularity build grayscale.sif Singularity.def

      - name: Upload Singularity image
        uses: actions/upload-artifact@v4
        with:
          name: grayscale-${{ github.sha }}.sif
          path: grayscale.sif

      - name: Prepare job.sh
        run: dos2unix job.sh || true

      - name: Set up SSH key, cert, and config
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SLURM_PRIVATE_KEY }}" > ~/.ssh/my_key
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/my_key.pub
          echo "${{ secrets.SSH_CERTIFICATE }}" > ~/.ssh/my_key-cert.pub
          chmod 600 ~/.ssh/my_key
          chmod 644 ~/.ssh/my_key.pub ~/.ssh/my_key-cert.pub
          cat <<EOF > ~/.ssh/config
          Host galileo
              HostName ${{ secrets.SLURM_HOST }}
              User ${{ secrets.SLURM_USER }}
              IdentityFile ~/.ssh/my_key
              CertificateFile ~/.ssh/my_key-cert.pub
              IdentitiesOnly yes
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
          EOF

      - name: Transfer files to Galileo100
        run: |
          scp -F ~/.ssh/config grayscale.sif job.sh galileo:~/seproject/

      - name: Submit SLURM job
        id: submit
        run: |
          JOB_ID=$(ssh -F ~/.ssh/config galileo "cd ~/seproject && sbatch job.sh" | awk '{print $4}')
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Wait for SLURM job to finish
        run: |
          JOB=${{ steps.submit.outputs.job_id }}
          echo "Waiting for SLURM job $JOB …"
          while true; do
            STATE=$(ssh -F ~/.ssh/config galileo 2>/dev/null \
                    "sacct -j $JOB -n -o State | head -n 1 | awk '{print \$1}'")
            # sacct can lag for a few seconds right after submission
            if [ -z "$STATE" ] ; then
              STATE=PENDING
            fi
            echo "  -> current state: $STATE"
            case "$STATE" in
              PENDING|CONFIGURING|RUNNING|COMPLETING)
                sleep 20
                ;;
              COMPLETED)
                echo "Job finished OK ✅"
                break
                ;;
              FAILED|CANCELLED|TIMEOUT|NODE_FAIL|PREEMPTED)
                echo "Job finished with error state ❌"
                exit 1
                ;;
              *)
                echo "Unknown state '$STATE' – giving up"
                exit 2
                ;;
            esac
          done


      - name: Download result logs
        run: |
          scp -F ~/.ssh/config galileo:~/seproject/grayscale_output.log .

      - name: Show job output in logs
        run: cat grayscale_output.log

      - name: Upload output log as artifact
        uses: actions/upload-artifact@v4
        with:
          name: grayscale_output-${{ github.sha }}.log
          path: grayscale_output.log
