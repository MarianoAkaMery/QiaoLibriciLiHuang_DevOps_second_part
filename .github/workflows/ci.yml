name: DevOps Pipeline Test

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    env:
      SIF_NAME: grayscale.sif

    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # ------------------------------------------------
      # 1) Build & test
      # ------------------------------------------------
      - name: Install build dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            cmake g++ make \
            uuid-dev libseccomp-dev pkg-config squashfs-tools cryptsetup \
            dos2unix curl wget openssh-client tree

      - name: Install Singularity
        run: |
          sudo apt-get update
          sudo apt-get install -y singularity-container

      - name: Clean up build folder before image build
        run: rm -rf build   

      - name: Build and test
        run: |
          ./build.sh
          ./build/test_grayscale

      # ------------------------------------------------
      # 2) Containerize (with isolated context)
      # ------------------------------------------------
      - name: Build Singularity Image (with clean context)
        run: |
          echo "Creating clean container build context..."
          mkdir singularity_context
          cp CMakeLists.txt Singularity.def job.sh singularity_context/
          for dir in src include input test; do
            if [ -d "$dir" ]; then
              cp -r "$dir" singularity_context/
            else
              echo "⚠️ Warning: Directory '$dir' not found. Skipping..."
            fi
          done

          echo "--- Singularity context structure ---"
          tree singularity_context

          cd singularity_context
          sudo singularity build "../${SIF_NAME}" Singularity.def

      - name: Upload SIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SIF_NAME }}-${{ github.sha }}.sif
          path: ${{ env.SIF_NAME }}

      # ------------------------------------------------
      # 3) Transfer to Galileo and Submit Job
      # ------------------------------------------------
      - name: Set up SSH key, cert, and config
        run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SLURM_PRIVATE_KEY }}" > ~/.ssh/my_key
            echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/my_key.pub
            echo "${{ secrets.SSH_CERTIFICATE }}" > ~/.ssh/my_key-cert.pub
            chmod 600 ~/.ssh/my_key
            chmod 644 ~/.ssh/my_key.pub ~/.ssh/my_key-cert.pub
            cat <<EOF > ~/.ssh/config
            Host galileo
                HostName ${{ secrets.SLURM_HOST }}
                User ${{ secrets.SLURM_USER }}
                IdentityFile ~/.ssh/my_key
                CertificateFile ~/.ssh/my_key-cert.pub
                IdentitiesOnly yes
                StrictHostKeyChecking no
                UserKnownHostsFile=/dev/null
            EOF


            
      - name: Submit SLURM job and wait
        if: ${{ !github.event.pull_request }}
        env:
          GALILEO_HOST: ${{ secrets.SLURM_HOST || secrets.GALILEO_HOST }}
          GALILEO_USER: ${{ secrets.SLURM_USER || secrets.GALILEO_USER }}
        run: |
          set -euo pipefail
          JOB_ID=$(ssh -F ~/.ssh/config galileo "cd ~/seproject && sbatch job.sh" | awk '{print $4}')
          echo "SLURM job id: $JOB_ID"
          echo "Waiting for SLURM job $JOB_ID …"
          while true; do
            STATE=$(ssh -F ~/.ssh/config galileo "sacct -j $JOB_ID -n -o State | head -n 1 | awk '{print \$1}'")
            [[ -z "$STATE" ]] && STATE=PENDING
            echo "  -> current state: $STATE"
            case "$STATE" in
              PENDING|CONFIGURING|RUNNING|COMPLETING) sleep 20 ;;
              COMPLETED) echo "Job finished OK ✅"; break ;;
              FAILED|CANCELLED|TIMEOUT|NODE_FAIL|PREEMPTED)
                echo "Job finished with error state ❌"; exit 1 ;;
              *)  echo "Unknown state '$STATE' – giving up"; exit 2 ;;
            esac
          done
